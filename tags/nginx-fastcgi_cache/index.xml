<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nginx Fastcgi_cache on 老刘博客</title>
    <link>https://iliu.org/tags/nginx-fastcgi_cache/</link>
    <description>Recent content in Nginx Fastcgi_cache on 老刘博客</description>
    <image>
      <title>老刘博客</title>
      <url>https://iliu.org/img/liujinsuiyue.jpg</url>
      <link>https://iliu.org/img/liujinsuiyue.jpg</link>
    </image>
    <generator>Hugo -- 0.151.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Sep 2019 01:51:11 +0000</lastBuildDate>
    <atom:link href="https://iliu.org/tags/nginx-fastcgi_cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WordPress开启Nginx fastcgi_cache缓存加速</title>
      <link>https://iliu.org/2700.html</link>
      <pubDate>Sun, 08 Sep 2019 01:51:11 +0000</pubDate>
      <guid>https://iliu.org/2700.html</guid>
      <description>&lt;p&gt;昨天下午没有太多事情，想起来一直想弄的nginx fastcgi_cache还没有弄，于是趁着重装景安服务器的功夫，顺便把这个玩意也搞搞，弄到晚上7点多，走了不少弯路，不过最后总算是搞定了。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>昨天下午没有太多事情，想起来一直想弄的nginx fastcgi_cache还没有弄，于是趁着重装景安服务器的功夫，顺便把这个玩意也搞搞，弄到晚上7点多，走了不少弯路，不过最后总算是搞定了。</p>
<p> </p>
<p>方法步骤如下：</p>
<p><a href="https://tunan.org/wp-content/uploads/2019/08/1824c863dd7459.jpg"><img loading="lazy" decoding="async" width="900" height="900" class="aligncenter size-full wp-image-2631" src="https://tunan.org/wp-content/uploads/2019/08/1824c863dd7459.jpg" alt="" srcset="https://tunan.org/wp-content/uploads/2019/08/1824c863dd7459.jpg 900w, https://tunan.org/wp-content/uploads/2019/08/1824c863dd7459-768x768.jpg 768w" sizes="(max-width: 900px) 100vw, 900px" /></a></p>
<h2 id="一安装nginx-ngx_cache_purge模块">一、安装Nginx ngx_cache_purge模块</h2>
<p>由于我使用的是oneinstack面板，所以以下的步骤都以此为基础，其他比如lnmp没有试过，可能需要微调一下。</p>
<pre class="ql-syntax" spellcheck="false"><span class="hljs-comment"># nginx -V 2&gt;&1 | grep -o ngx_cache_purge 查看ngx_cache_purge是否安装,没有数据表示未安装</span>
 cd /root/oneinstack/src
 wget http://labs.frickle.com/files/ngx_cache_purge<span class="hljs-number">-2.3</span>.tar.gz
 tar xzf ngx_cache_purge<span class="hljs-number">-2.3</span>.tar.gz
 <span class="hljs-comment">#以下几个安装包都是Oneinstack自带的，不同的版本可能会不同，请根据情况调整</span>
 tar xzf nginx<span class="hljs-number">-1.16.1</span>.tar.gz
 tar xzf pcre<span class="hljs-number">-8.43</span>.tar.gz
 tar xzf openssl<span class="hljs-number">-1.1.1</span>c.tar.gz
 cd /root/oneinstack/src/nginx<span class="hljs-number">-1.16.1</span>
 nginx -V <span class="hljs-comment">#查看nginx编译参数，最后加上--add-module=../ngx_cache_purge-2.3</span>
 ./configure --prefix=/usr/local/nginx --user=www --group=www --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-http_v2_module --<span class="hljs-keyword">with</span>-http_ssl_module --<span class="hljs-keyword">with</span>-http_gzip_static_module --<span class="hljs-keyword">with</span>-http_realip_module --<span class="hljs-keyword">with</span>-http_flv_module --<span class="hljs-keyword">with</span>-http_mp4_module --<span class="hljs-keyword">with</span>-openssl=../openssl<span class="hljs-number">-1.0.2</span>o --<span class="hljs-keyword">with</span>-pcre=../pcre<span class="hljs-number">-8.42</span> --<span class="hljs-keyword">with</span>-pcre-jit --<span class="hljs-keyword">with</span>-ld-opt=-ljemalloc --add-module=../ngx_cache_purge<span class="hljs-number">-2.3</span>
 make <span class="hljs-comment">#编译</span>
 mv /usr/local/nginx/sbin/nginx{,_`date +%F`} <span class="hljs-comment">#备份nginx</span>
 cp objs/nginx /usr/local/nginx/sbin
 nginx -V <span class="hljs-number">2</span>&gt;&<span class="hljs-number">1</span> | grep -o ngx_cache_purge
 <span class="hljs-comment"># 显示ngx_cache_purge表示已经安装成功、</span>
</pre>
<p>使用<code>Nginx -V</code>查看编译参数添加add-module时，一定要根据你自己的Nginx的编译参数来操作，也就是说保留原来的Nginx参数再加上add-module。例如我的：</p>
<h2 id="二nginx开启fastcgi_cache缓存-配置实例">二、Nginx开启fastcgi_cache缓存-配置实例</h2>
<p>这里我直接贴出我的www.yanjingweb.cn的配置实例</p>
<pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">fastcgi_cache_path</span> /tmp/wpcache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=WORDPRESS:<span class="hljs-number">250m</span> inactive=<span class="hljs-number">1d</span> max_size=<span class="hljs-number">1G</span>;
 <span class="hljs-attribute">fastcgi_temp_path</span> /tmp/wpcache/temp;
 <span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">"<span class="hljs-variable">$scheme$request_method$host$request_uri</span>"</span>;
 <span class="hljs-attribute">fastcgi_cache_use_stale</span> <span class="hljs-literal">error</span> timeout invalid_header http_500;
 <span class="hljs-comment">#忽略一切nocache申明，避免不缓存伪静态等fastcgi_ignore_headers Cache-Control Expires Set-Cookie;</span>
<span class="hljs-section">server</span> {
 <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;
 <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2
此处略
set <span class="hljs-variable">$skip_cache</span> <span class="hljs-number"></span>;
 <span class="hljs-comment">#post访问不缓存if ($request_method = POST) {</span>
 <span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;
 }
 <span class="hljs-comment">#动态查询不缓存if ($query_string != "") {</span>
 <span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;
 }
 <span class="hljs-comment">#后台等特定页面不缓存（其他需求请自行添加即可）if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {</span>
 <span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;
 }
 <span class="hljs-comment">#对登录用户、评论过的用户不展示缓存if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {</span>
 <span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;
 }
 <span class="hljs-comment">#这里请参考你网站之前的配置，特别是sock的路径，弄错了就502了！location ~ [^/]\.php(/|$) {</span>
 <span class="hljs-comment">#fastcgi_pass remote_php_ip:9000;fastcgi_pass unix:/dev/shm/php-cgi.sock;</span>
 <span class="hljs-attribute">fastcgi_index</span> index.php;
 <span class="hljs-attribute">include</span> fastcgi.conf;
 <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">"max-age=63072000; includeSubdomains; preload"</span>;
 <span class="hljs-comment">#新增的缓存规则fastcgi_cache_bypass $skip_cache;</span>
 <span class="hljs-attribute">fastcgi_no_cache</span> <span class="hljs-variable">$skip_cache</span>;
 <span class="hljs-attribute">add_header</span> X-Cache <span class="hljs-string">"<span class="hljs-variable">$upstream_cache_status</span> From <span class="hljs-variable">$host</span>"</span>;
 <span class="hljs-attribute">add_header</span> Cache-Control max-age=<span class="hljs-number"></span>;
 <span class="hljs-attribute">add_header</span> Nginx-Cache <span class="hljs-string">"<span class="hljs-variable">$upstream_cache_status</span>"</span>;
 <span class="hljs-attribute">add_header</span> Last-Modified <span class="hljs-variable">$date_gmt</span>;
 <span class="hljs-attribute">add_header</span> X-Frame-Options SAMEORIGIN; <span class="hljs-comment"># 只允许本站用 frame 来嵌套add_header X-Content-Type-Options nosniff; # 禁止嗅探文件类型add_header X-XSS-Protection "1; mode=block"; # XSS 保护etag on;</span>
 <span class="hljs-attribute">fastcgi_cache</span> WORDPRESS;
 <span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">1d</span>;
 }
<span class="hljs-comment">#缓存清理配置（可选）location ~ /purge( /.*) { #为防止转义，请去掉{ /之间的空格allow 127.0.0.1;</span>
 <span class="hljs-comment">#此处填写你的服务器IPallow 122.115.122.111;</span>
 <span class="hljs-attribute">deny</span> all;
 <span class="hljs-comment">#请注意此处的WORDPRESS要与上面的keys_zone保持一致fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";</span>
 }
</pre>
<p>以下略</p>
<p>至此，全部设置结束，nginx -t 检查以下nginx。然后重新启动一下nginx。service nginx restart</p>
<p>用浏览器打开一个网页，F5刷新几下，看看浏览器的head，就能看到nginx_cache hit字样，说明缓存成功了。然后看缓存文件夹了，也有了一堆的文件。</p>
<p><a href="https://tunan.org/wp-content/uploads/2019/09/1111111.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" decoding="async" src="https://tunan.org/wp-content/uploads/2019/09/1111111.png" width="748" height="363" /></a></p>
<p>最后，说一下</p>
<p>开通这个之后，确实打开网页的速度快了不少，在不用CDN的前提下，网页也能秒开了，有动手能力的同学不妨一试。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
