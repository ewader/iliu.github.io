<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Django on 老刘博客</title>
    <link>https://iliu.org/tags/django/</link>
    <description>Recent content in Django on 老刘博客</description>
    <image>
      <title>老刘博客</title>
      <url>https://iliu.org/img/liujinsuiyue.jpg</url>
      <link>https://iliu.org/img/liujinsuiyue.jpg</link>
    </image>
    <generator>Hugo -- 0.151.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Nov 2022 00:17:14 +0000</lastBuildDate>
    <atom:link href="https://iliu.org/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django设置使用MySql的时候遇到的一些坑</title>
      <link>https://iliu.org/4298.html</link>
      <pubDate>Fri, 18 Nov 2022 00:17:14 +0000</pubDate>
      <guid>https://iliu.org/4298.html</guid>
      <description>&lt;p&gt;Django默认使用的数据库是sqllit,如果是一个小项目的话是完全够用的，但是如果考虑到这个项目未来的话，一般都会换成Mysql或者其他更专业的数据库。本文，就来说说，在设置使用mysql的时候，遇到的一些问题及解决的方法。&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Django默认使用的数据库是sqllit,如果是一个小项目的话是完全够用的，但是如果考虑到这个项目未来的话，一般都会换成Mysql或者其他更专业的数据库。本文，就来说说，在设置使用mysql的时候，遇到的一些问题及解决的方法。<figure class="wp-block-image"></p>
<p><img decoding="async" src="https://cdn.staticaly.com/gh/ewader/img@master/20221118/OIP-C.3x9vnetzw6m0.webp" alt="OIP-C" /> </figure></p>
<h2 class="wp-block-heading" id="项目里设置引用mysql">项目里设置引用Mysql</h2>
<p>在setting.py里,把原来使用sqllit的语句删除或者注释掉，添加如下代码</p>
<pre class="wp-block-code"><code>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',   # 数据库引擎
        'NAME': '',  # 数据库名，先前创建的
        'USER': '',     # 用户名，可以自己创建用户
        'PASSWORD': '',  # 密码
        'HOST': '127.0.0.1',  # mysql服务所在的主机ip
        'PORT': '3306',         # mysql服务端口
    }
}</code></pre>
<p><strong>安装Python访问MySQL的模块</strong></p>
<p>Django官方已经不建议使用pymysql库了，而是改用mysqlclient，直接pip安装即可。</p>
<pre class="wp-block-code"><code>pip install mysqlclient</code></pre>
<p>在debian11上安装的时候，显示OSError: mysql_config not found的错误，查询得知，需要安装libmysqlclient-dev，但是用apt install libmysqlclient-dev的时候，安装不成功，提示是另一个分支，建议安装libmariadb-dev。所以安装这个即可。</p>
<pre class="wp-block-code"><code>apt install libmariadb-dev</code></pre>
<p>出错：error: command ‘x86_64-linux-gnu-gcc’ failed: No such file or directory</p>
<pre class="wp-block-code"><code>sudo apt-get install build-essential python3-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev
</code></pre>]]></content:encoded>
    </item>
    <item>
      <title>Django部署在debian11服务器</title>
      <link>https://iliu.org/4029.html</link>
      <pubDate>Fri, 14 Jan 2022 09:34:09 +0000</pubDate>
      <guid>https://iliu.org/4029.html</guid>
      <description>&lt;p&gt;Python加Django开发网页程序真的很方便，连我这个菜鸟看看教程之类的也能写出来程序。本地测试完了之后，想在服务器上跑跑看，结果发现，要发布到服务器端，可是比PHP程序要麻烦的多，从昨天下午就开始看相关的教程，后来在宝塔面板下部署成功了，但是我不想用宝塔面板，于是继续折腾的道路，经过一天的折腾，重装了好几次测试的服务器，终于算是部署成功了，虽然只是一个测试的项目，但是总算又迈出去了一步不是。项目采用nginx+uwsgi+django。服务器端采用的是debian11。&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Python加Django开发网页程序真的很方便，连我这个菜鸟看看教程之类的也能写出来程序。本地测试完了之后，想在服务器上跑跑看，结果发现，要发布到服务器端，可是比PHP程序要麻烦的多，从昨天下午就开始看相关的教程，后来在宝塔面板下部署成功了，但是我不想用宝塔面板，于是继续折腾的道路，经过一天的折腾，重装了好几次测试的服务器，终于算是部署成功了，虽然只是一个测试的项目，但是总算又迈出去了一步不是。项目采用nginx+uwsgi+django。服务器端采用的是debian11。<figure class="wp-block-image size-full"></p>
<p><img loading="lazy" decoding="async" width="1920" height="1141" src="https://tunan.org/wp-content/uploads/2022/01/7d4638de9da853b.jpeg" alt="" class="wp-image-4030" srcset="https://tunan.org/wp-content/uploads/2022/01/7d4638de9da853b.jpeg 1920w, https://tunan.org/wp-content/uploads/2022/01/7d4638de9da853b-768x456.jpeg 768w, https://tunan.org/wp-content/uploads/2022/01/7d4638de9da853b-1536x913.jpeg 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /> </figure></p>
<h2 class="wp-block-heading" id="在服务器安装python3">在服务器安装python3</h2>
<p>由于debian11本身带有3.9.2版本的，所以，这里就不安装了。直接在data文件夹里建立一个虚拟目录。</p>
<pre class="wp-block-code"><code>python3 -m venv env
然后进入虚拟环境
source env/bin/activate
安装环境
可以用本地服务器的导出的requirements.txt，命令是：
pip freeze &gt; requirements.txt #在本地虚拟环境使用
切换到服务器端，上传这个文件到data目录下
 
pip install -r requirements.txt #这样就可以在建立起和你的本地一样的环境
pip install uwsgi#虚拟环境里装了后，需要在真实环境再运行一次



</code></pre>
<p>上传本地的项目到data<br>
在与manage.py同级目录下建立一个新文件。uwsgi.ini</p>
<pre class="wp-block-code"><code>#添加配置选择
&#91;uwsgi]
#配置和nginx连接的socket连接
socket=127.0.0.1:8997
#配置项目路径，项目的所在目录
chdir=/data/wwwroot/mysite/
#配置wsgi接口模块文件路径,也就是wsgi.py这个文件所在的目录
wsgi-file=myblog/wsgi.py
#配置启动的进程数
processes=4
#配置每个进程的线程数
threads=2
#配置启动管理主进程
master=True
#配置存放主进程的进程号文件
pidfile=uwsgi.pid
#配置dump日志记录
daemonize=uwsgi.log
home=/data/env/</code></pre>
<h2 class="wp-block-heading" id="安装nginx">安装nginx</h2>
<p>由于使用习惯了oneinstack,这里继续用这个面板安装，只需安装nginx即可，可去官网看安装方法，安装完成后，./vhost建立虚拟主机。虚拟主机的目录定位到你放置项目的位置。然后在usr/local/nginx/conf/vhost/下编辑你创建的这个主机的conf。加入以下的语句。</p>
<pre class="wp-block-code"><code>location / {
       include uwsgi_params;
       uwsgi_pass 127.0.0.1:8997;  #端口要和uwsgi里配置的一样
       uwsgi_param UWSGI_SCRIPT myblog.wsgi;  #wsgi.py所在的目录名+.wsgi
       uwsgi_param UWSGI_CHDIR /data/wwwroot/**/; #项目路径
    }
      location /static/ {
      alias /data/wwwroot/**/static/; #静态资源路径
      }

</code></pre><figure class="wp-block-image size-full">
<p><img loading="lazy" decoding="async" width="1123" height="650" src="https://tunan.org/wp-content/uploads/2022/01/3f0ca4a65443ea0.png" alt="" class="wp-image-4031" srcset="https://tunan.org/wp-content/uploads/2022/01/3f0ca4a65443ea0.png 1123w, https://tunan.org/wp-content/uploads/2022/01/3f0ca4a65443ea0-768x445.png 768w" sizes="(max-width: 1123px) 100vw, 1123px" /> </figure></p>
<h2 class="wp-block-heading" id="启动nginx和uwsgi">启动nginx和uwsgi</h2>
<pre class="wp-block-code"><code>service nginx restart

进项目目录，虚拟环境下
uwsgi --ini uwsgi.ini
</code></pre>
<p>然后打开你的域名，应该就没有问题了</p>
<h2 class="wp-block-heading" id="遇到的一些问题">遇到的一些问题：</h2>
<p>1、python manage.py runserver正常，但是浏览器用IP：8000打不开的问题，需要用以下命令</p>
<pre class="wp-block-preformatted">python manage.py runserver 0.0.0.0:8000</pre>
<p>2、没有在uwsgi.ini中配置虚拟环境目录，导致浏览器打开时候报502的错误。只需要正确的配置目录，是会正常启动的。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
